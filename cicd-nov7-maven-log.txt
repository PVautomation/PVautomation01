;;;;;;;;;;;;;;;;;;;


$apiKey = "$(MAILJET_API_KEY)"
$apiSecret = "$(MAILJET_API_SECRET)"

# Encode API key and secret for Basic Auth
$auth = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes("$($apiKey):$($apiSecret)"))

$headers = @{
    "Authorization" = "Basic $auth"
    "Content-Type"  = "application/json"
}

$fromEmail = "preethapv01@gmail.com"  # Verified sender in Mailjet
$subject = "CI/CD RESULTS"
$bodyText = "Build $(Build.BuildNumber) completed successfully."

# Two recipients
$toRecipients = @(
    @{
        "Email" = "preethapv01@gmail.com"
        "Name"  = "Recipient One"
    },
    @{
        "Email" = "test@test.com"
        "Name"  = "Recipient Two"
    }
)

$body = @{
    "Messages" = @(
        @{
            "From" = @{
                "Email" = $fromEmail
                "Name"  = "CI/CD Pipeline"
            }
            "To" = $toRecipients
            "Subject" = $subject
            "TextPart" = $bodyText
        }
    )
} | ConvertTo-Json -Depth 5

$mailjetUrl = "https://api.mailjet.com/v3.1/send"

Invoke-RestMethod -Uri $mailjetUrl -Method POST -Headers $headers -Body $body






;;;;;;;;;;;;;;;;;;;;;;
$apiKey = "$(MAILJET_API_KEY)"
$apiSecret = "$(MAILJET_API_SECRET)"

# Mailjet endpoint for sending emails
$mailjetUrl = "https://api.mailjet.com/v3.1/send"

# Prepare the request body as JSON
$body = @{
    Messages = @(
        @{
            From = @{
                Email = "sender@example.com" # Make sure this is a verified sender
                Name = "CI/CD Pipeline"
            }
To = @(
    @{
        Email = "recipient1@example.com"
        Name = "Recipient One"
    },
    @{
        Email = "recipient2@example.com"
        Name = "Recipient Two"
    },

)
} | ConvertTo-Json

# Create headers for Basic Auth (API Key & Secret)
$auth = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes("$apiKey:$apiSecret"))
$headers = @{
    "Authorization" = "Basic $auth"
    "Content-Type"  = "application/json"
}

Invoke-RestMethod -Uri $mailjetUrl -Method POST -Headers $headers -Body $body














}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}

2024-12-12T17:01:21.2095569Z ##[section]Starting: PowerShell Script - CI/CD Test Results
2024-12-12T17:01:21.2102847Z ==============================================================================
2024-12-12T17:01:21.2103187Z Task         : PowerShell
2024-12-12T17:01:21.2103331Z Description  : Run a PowerShell script on Linux, macOS, or Windows
2024-12-12T17:01:21.2103523Z Version      : 2.247.1
2024-12-12T17:01:21.2103617Z Author       : Microsoft Corporation
2024-12-12T17:01:21.2103792Z Help         : https://docs.microsoft.com/azure/devops/pipelines/tasks/utility/powershell
2024-12-12T17:01:21.2103963Z ==============================================================================
2024-12-12T17:01:22.2208441Z Generating script.
2024-12-12T17:01:22.2651540Z ========================== Starting Command Output ===========================
2024-12-12T17:01:22.2948634Z ##[command]"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -NoLogo -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -Command ". 'D:\a\_temp\848f9140-0763-4b99-9dce-53ccae036386.ps1'"
2024-12-12T17:01:36.6837514Z Send-MailMessage : The SMTP server requires a secure connection or the client was not authenticated. The server 
2024-12-12T17:01:36.6838633Z response was: 5.7.57 Client not authenticated to send mail. Error: 535 5.7.139 Authentication unsuccessful, the 
2024-12-12T17:01:36.6839144Z request did not meet the criteria to be authenticated successfully. Contact your administrator. 
2024-12-12T17:01:36.6839909Z [DM6PR01CA0015.prod.exchangelabs.com 2024-12-12T17:01:33.542Z 08DD19DC0E315108]
2024-12-12T17:01:36.6841552Z At D:\a\_temp\848f9140-0763-4b99-9dce-53ccae036386.ps1:15 char:1
2024-12-12T17:01:36.6842258Z + Send-MailMessage -From $from -To $to -Subject $subject -Body $body -S ...
2024-12-12T17:01:36.6842895Z + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2024-12-12T17:01:36.6843937Z     + CategoryInfo          : InvalidOperation: (System.Net.Mail.SmtpClient:SmtpClient) [Send-MailMessage], SmtpExcept 
2024-12-12T17:01:36.6844539Z    ion
2024-12-12T17:01:36.6845073Z     + FullyQualifiedErrorId : SmtpException,Microsoft.PowerShell.Commands.SendMailMessage
2024-12-12T17:01:36.6845611Z  
2024-12-12T17:01:36.7659280Z ##[error]PowerShell exited with code '1'.
2024-12-12T17:01:36.8092497Z ##[section]Finishing: PowerShell Script - CI/CD Test Results
]]]]]]]]]]]
2024-12-12T16:41:40.5511063Z ##[section]Starting: PowerShell Script - CI/CD Test Results
2024-12-12T16:41:40.5564178Z ==============================================================================
2024-12-12T16:41:40.5564827Z Task         : PowerShell
2024-12-12T16:41:40.5565080Z Description  : Run a PowerShell script on Linux, macOS, or Windows
2024-12-12T16:41:40.5565331Z Version      : 2.247.1
2024-12-12T16:41:40.5565570Z Author       : Microsoft Corporation
2024-12-12T16:41:40.5565882Z Help         : https://docs.microsoft.com/azure/devops/pipelines/tasks/utility/powershell
2024-12-12T16:41:40.5566155Z ==============================================================================
2024-12-12T16:41:41.6778291Z Generating script.
2024-12-12T16:41:41.6779235Z ========================== Starting Command Output ===========================
2024-12-12T16:41:41.6779856Z ##[command]"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -NoLogo -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -Command ". 'D:\a\_temp\53545248-4445-4658-8fa0-eecbfeffd517.ps1'"
2024-12-12T16:41:42.3880906Z Build.Status : The term 'Build.Status' is not recognized as the name of a cmdlet, function, script file, or operable 
2024-12-12T16:41:42.3883330Z program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
2024-12-12T16:41:42.3883980Z At D:\a\_temp\53545248-4445-4658-8fa0-eecbfeffd517.ps1:10 char:56
2024-12-12T16:41:42.3884891Z + $body = "Build completed. Test results: 20241212.1 - $(Build.Status)"
2024-12-12T16:41:42.3885419Z +                                                        ~~~~~~~~~~~~
2024-12-12T16:41:42.3885928Z     + CategoryInfo          : ObjectNotFound: (Build.Status:String) [], ParentContainsErrorRecordException
2024-12-12T16:41:42.3886473Z     + FullyQualifiedErrorId : CommandNotFoundException
2024-12-12T16:41:42.3886957Z  
2024-12-12T16:41:42.5007228Z ##[error]PowerShell exited with code '1'.
2024-12-12T16:41:42.5599124Z ##[section]Finishing: PowerShell Script - CI/CD Test Results


]]]]]]]]]]]]]]]]]]
$smtpServer = "$(SMTP_SERVER)"
$smtpUsername = "$(SMTP_USERNAME)"
$smtpPassword = "$(SMTP_PASSWORD)"
$from = "$(SMTP_FROM)"
$to = "recipient@example.com"
$subject = "CI/CD Test Results"
$body = "Build completed. Test results: $(Build.BuildNumber) - $(Build.Status)"

$securePassword = ConvertTo-SecureString $smtpPassword -AsPlainText -Force
$cred = New-Object System.Management.Automation.PSCredential($smtpUsername, $securePassword)

Send-MailMessage -From $from -To $to -Subject $subject -Body $body -SmtpServer $smtpServer -UseSSL -Credential $cred -Port 587

============

- task: PowerShell@2
  displayName: 'Send Email via Outlook SMTP'
  inputs:
    targetType: 'inline'
    script: |
      $smtpServer = "$(SMTP_SERVER)"
      $smtpUsername = "$(SMTP_USERNAME)"
      $smtpPassword = "$(SMTP_PASSWORD)"

      $from = "$(SMTP_FROM)"
      $to = "recipient@example.com"
      $subject = "CI/CD Test Results"
      $body = "Build $(Build.BuildNumber) completed. Test results: $(Build.Status)"

      # Convert password to a secure string
      $securePassword = ConvertTo-SecureString $smtpPassword -AsPlainText -Force
      $cred = New-Object System.Management.Automation.PSCredential($smtpUsername, $securePassword)

      Send-MailMessage -From $from -To $to -Subject $subject -Body $body -SmtpServer $smtpServer -UseSSL -Credential $cred -Port 587

]]]]]]]]]]]]]]]]]]]]]]]
SMTP_SERVER: smtp.office365.com
SMTP_USERNAME: 
SMTP_PASSWORD:
SMTP_FROM: 
---SMTP_PASSWORD
==========

//////////////////////////////////////////////
package loanCalculatorPackage;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.apache.commons.io.FileUtils;
import org.testng.ITestListener;
import org.testng.ITestResult;
import org.testng.Reporter;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.reporters.JUnitXMLReporter;
import org.testng.IReporter;
import org.testng.ISuite;
import org.testng.xml.XmlSuite;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import java.io.File;
import java.nio.file.Paths;
import java.util.List;

public class CustomJUnitReporter extends JUnitXMLReporter implements ITestListener, IReporter {

    private static final String SCREENSHOT_DIRECTORY = "screenshots";  // Directory to store screenshots
    private static final String OWNER_NAME = "YOUR_NAME"; // Replace with the actual owner name

    @Override
    public void onTestStart(ITestResult result) {
        // Capture screenshot at the start of the test
        captureScreenshot(result);
    }

    @Override
    public void onTestSuccess(ITestResult result) {
        // Retrieve any logs added using Reporter.log
        String logMessages = String.join("\n", Reporter.getOutput(result));

        // Append the success message to the result message
        String successMessage = "Assertion Success: Expected value matched actual value.\n" + logMessages;

        // Set a dummy throwable to include the success message in the JUnit report
        result.setThrowable(new Exception(successMessage));

        // Attach screenshot after test success
        attachScreenshot(result);
    }

    @Override
    public void onTestFailure(ITestResult result) {
        // Retrieve any logs added using Reporter.log
        String logMessages = String.join("\n", Reporter.getOutput(result));
        String originalMessage = (result.getThrowable() != null && result.getThrowable().getMessage() != null)
                ? result.getThrowable().getMessage()
                : "Test failed";

        String failureMessage = originalMessage + "\n" + logMessages;

        result.setThrowable(new Exception(failureMessage));

        // Attach screenshot after test failure
        attachScreenshot(result);
    }

    @Override
    public void onTestSkipped(ITestResult result) {
        // Handle skipped tests if needed
    }

    @Override
    public void onTestFailedButWithinSuccessPercentage(ITestResult result) {
        // Handle failure within success percentage if needed
    }

    @Override
    public void onStart(org.testng.ITestContext context) {
        // Test execution starts
    }

    @Override
    public void onFinish(org.testng.ITestContext context) {
        // Test execution finishes
    }

    private void captureScreenshot(ITestResult result) {
        WebDriver driver = (WebDriver) result.getTestContext().getAttribute("driver");

        if (driver != null) {
            try {
                // Get screenshot directory
                String screenshotDirectory = getscreenshotDirectory();

                // Construct the screenshot file path
                String screenshotPath = Paths.get(screenshotDirectory, result.getName() + ".png").toString();
                File screenshotFile = new File(screenshotPath);

                // Capture the screenshot if it doesn't exist
                if (!screenshotFile.exists()) {
                    File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
                    FileUtils.copyFile(screenshot, screenshotFile);
                }

                // Attach screenshot to the test result
                result.setAttribute("screenshot", screenshotFile.getAbsolutePath());

            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Failed to capture screenshot for test: " + result.getName());
            }
        } else {
            System.out.println("WebDriver not found for test: " + result.getName());
        }
    }

    private String getscreenshotDirectory() {
        String workingDir = System.getProperty("user.dir");
        String screenshotDirectory = Paths.get(workingDir, SCREENSHOT_DIRECTORY).toString();

        File screenshotDir = new File(screenshotDirectory);
        if (!screenshotDir.exists()) {
            screenshotDir.mkdirs(); // Create if it doesn't exist
        }

        System.out.println("Screenshot Directory: " + screenshotDirectory);
        return screenshotDirectory;
    }

    private void attachScreenshot(ITestResult result) {
        Object screenshot = result.getAttribute("screenshot");
        if (screenshot != null) {
            String screenshotUrl = screenshot.toString();
            String message = "<a href=\"" + screenshotUrl + "\">Click here to view screenshot</a>";

            String resultMessage = result.getThrowable() != null ? result.getThrowable().getMessage() : "";
            resultMessage += "\n" + message;

            // Modify the result's message to include the screenshot link
            result.setThrowable(new Exception(resultMessage));
        }
    }

    /**
     * IReporter method: Runs after all tests have completed. This method modifies the JUnit XML report
     * to include the owner property.
     */
    @Override
    public void generateReport(List<XmlSuite> xmlSuites, List<ISuite> suites, String outputDirectory) {
        try {
            // Locate the JUnit XML report. Adjust the file name as needed.
            // For example, if your test suite name is "My Test Suite", TestNG might generate a file:
            // TEST-My_Test_Suite.xml or something similar. Update accordingly.
            File reportFile = findJUnitReportFile(outputDirectory);
            if (reportFile == null || !reportFile.exists()) {
                System.out.println("No JUnit report file found to update.");
                return;
            }

            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(reportFile);
            doc.getDocumentElement().normalize();

            // Get the <testsuite> element
            Element testSuite = (Element) doc.getElementsByTagName("testsuite").item(0);
            if (testSuite == null) {
                System.out.println("No <testsuite> element found in JUnit report.");
                return;
            }

            // Add <properties>
            Element properties = doc.createElement("properties");
            Element property = doc.createElement("property");
            property.setAttribute("name", "owner");
            property.setAttribute("value", OWNER_NAME);

            properties.appendChild(property);
            testSuite.appendChild(properties);

            // Write the updated document back to the file
            Transformer transformer = TransformerFactory.newInstance().newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            DOMSource source = new DOMSource(doc);
            StreamResult streamResult = new StreamResult(reportFile);
            transformer.transform(source, streamResult);

            System.out.println("Owner property added to JUnit XML report: " + OWNER_NAME);

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Failed to inject owner property into JUnit XML report.");
        }
    }

    /**
     * Helper method to find a JUnit report file (TEST-*.xml) in the output directory.
     */
    private File findJUnitReportFile(String outputDirectory) {
        File dir = new File(outputDirectory);
        if (!dir.exists() || !dir.isDirectory()) {
            return null;
        }

        // Look for files starting with TEST- and ending with .xml
        File[] files = dir.listFiles((d, name) -> name.startsWith("TEST-") && name.endsWith(".xml"));
        if (files != null && files.length > 0) {
            return files[0]; // Return the first match found
        }
        return null;
    }
}

/////////////////////////////////////////////














<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite1">

  <listeners>
    <!-- Add JUnitXMLReporter to generate JUnit-compatible reports -->
    <listener class-name="org.testng.reporters.JUnitXMLReporter"/>
  </listeners>

  <test name="Test1">
    <classes>
      <class name="loanCalculatorPackage.LoanCalculatorTestClass1">
        <methods>
          <include name="testLc1" />  
          <include name="OfferTest" />
        </methods>
      </class>
    </classes>
  </test> <!-- Test -->

</suite> <!-- Suite -->

]]]]]]]]]]]]]]]]
- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/junitreports/TEST-*.xml' 
    testResultsFormat: 'JUnit'
    mergeTestResults: true

]]]]]]]]]]]]




pool:
  name: Azure Pipelines
  demands: maven

steps:

# Use Java 11
- task: JavaToolInstaller@1
  displayName: 'Use Java 11'
  inputs:
    versionSpec: 11
    jdkArchitectureOption: x64
    jdkSourceOption: PreInstalled

# Maven Clean Install (without tests)
- task: Maven@3
  displayName: 'Maven JavaMavenTestNG/pom.xml - Clean Install'
  inputs:
    mavenPomFile: JavaMavenTestNG/pom.xml
    goals: 'clean install -DskipTests'
    options: '-Dwebdriver.chrome.driver=$(Build.SourcesDirectory)\src\chromedriver.exe'
    jdkVersionOption: 1.11

# Maven TestNG - Run Tests
- task: Maven@4
  displayName: 'Run TestNG Tests'
  inputs:
    mavenPomFile: JavaMavenTestNG/pom.xml
    goals: 'test -DsuiteXmlFile=testng.xml'
    options: '-Dwebdriver.chrome.driver=$(Build.SourcesDirectory)\src\chromedriver.exe'
    jdkVersionOption: 1.11
    testResultsFiles: '**/test-output/testng-*.xml'  # Correct path for test results

# Publish Test Results
- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFiles: '**/test-output/testng-*.xml'  # Correct path for test results
    testRunTitle: 'TestNG Test Results'

# Copy Files to Artifact Staging Directory (Conditionally)
- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: '*.*'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
  condition: succeededOrFailed()

# Publish Build Artifacts
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: JavaMavenTestNG
  condition: succeededOrFailed()
--------------

<plugin>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-surefire-plugin</artifactId>
  <version>3.0.0-M4</version>
  <configuration>
    <!-- reports are generated in the test-output directory -->
    <reportsDirectory>${project.basedir}/test-output</reportsDirectory> 
       <suiteXmlFiles>
            <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>

        </suiteXmlFiles>
  </configuration>
</plugin>
------------
----
- task: PublishTestResults@2
  inputs:
    testResultsFiles: '$(Build.SourcesDirectory)/test-output/testng-*.xml'
    testRunTitle: 'Selenium Test Results'

-------
