===========

String script = "(function() {\n"
        + "    let open = XMLHttpRequest.prototype.open;\n"
        + "    XMLHttpRequest.prototype.open = function() {\n"
        + "        this.addEventListener('load', function() {\n"
        + "            if (this.responseURL.includes('ENDPOINT')) {\n"
        + "                console.log('API Matched: ', this.responseURL);\n"
        + "                console.log('Response:', this.responseText);\n"
        + "                window.apiResponse = this.responseText;\n"
        + "                if (this.responseText.includes('\"branch number\" : \"104\"')) {\n"
        + "                    window.stringFound = true;\n"
        + "                } else {\n"
        + "                    window.stringFound = false;\n"
        + "                }\n"
        + "            }\n"
        + "        });\n"
        + "        open.apply(this, arguments);\n"
        + "    };\n"
        + "})();";

------------------

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;

public class BranchUpdateApiResponseTest {

    @Test
    public void branchUpdateVerifyApiResponseTest() {
        System.out.println("Executing Branch Update API Response Verification...");

        try {
            driver.get("URL");
            ACTION
            Thread.sleep(8000);

            JavascriptExecutor js = (JavascriptExecutor) driver;

            String script = """
                (function() {
                    let open = XMLHttpRequest.prototype.open;
                    XMLHttpRequest.prototype.open = function() {
                        this.addEventListener('load', function() {
                            if (this.responseURL.includes('ENDPOINT')) {
                                console.log('API Matched: ', this.responseURL);
                                console.log('Response:', this.responseText);
                                window.apiResponse = this.responseText;
                                
                                if (this.responseText.includes('"branch number" : "104"')) {
                                    window.stringFound = true;
                                } else {
                                    window.stringFound = false;
                                }
                            }
                        });
                        open.apply(this, arguments);
                    };
                })();
            """;

            js.executeScript(script);
            Thread.sleep(5000); 

            // Retrieve global variables
            String apiResponse = (String) js.executeScript("return window.apiResponse;");
            Boolean stringFound = (Boolean) js.executeScript("return window.stringFound;");

            // Print results
            if (apiResponse != null) {
                System.out.println("Captured API Response: " + apiResponse);
            } else {
                System.out.println("API Response not captured. Ensure the endpoint is called.");
            }

            if (Boolean.TRUE.equals(stringFound)) {
                System.out.println("The string \"branch number\" : \"104\" was found in the API response!");
            } else {
                System.out.println("The string \"branch number\" : \"104\" was NOT found in the API response.");
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            driver.quit();
        }
    }
}


==============================

finally {
        
            System.out.println("Resetting implicit wait to original value..");
            driver.manage().timeouts().implicitlyWait(originalImplicitWait);
        }
new WebDriverWait(driver, Duration.ofSeconds(10))
    .until(ExpectedConditions.elementToBeClickable(By.id("username")))
    .click();

echo Cleaning up old test results
echo Current Directory: %cd%
if exist "pv-loan-calculator-test\test-output\junitreports\*" (
    del /s /q "pv-loan-calculator-test\test-output\junitreports\*"
) else (
    echo Directory not found: pv-loan-calculator-test\test-output\junitreports\
)
-----
2024-12-16T00:34:45.2127887Z ##[section]Starting: Command Line Script - clean up old test results files
2024-12-16T00:34:45.2134627Z ==============================================================================
2024-12-16T00:34:45.2135059Z Task         : Command line
2024-12-16T00:34:45.2135220Z Description  : Run a command line script using Bash on Linux and macOS and cmd.exe on Windows
2024-12-16T00:34:45.2135453Z Version      : 2.246.1
2024-12-16T00:34:45.2135582Z Author       : Microsoft Corporation
2024-12-16T00:34:45.2135780Z Help         : https://docs.microsoft.com/azure/devops/pipelines/tasks/utility/command-line
2024-12-16T00:34:45.2135982Z ==============================================================================
2024-12-16T00:34:46.3063553Z Generating script.
2024-12-16T00:34:46.3183338Z Script contents: shell
2024-12-16T00:34:46.3193330Z del /s /q pv-loan-calculator-test\test-output\junitreports\*
2024-12-16T00:34:46.3571478Z ========================== Starting Command Output ===========================
2024-12-16T00:34:46.3958605Z ##[command]"C:\Windows\system32\cmd.exe" /D /E:ON /V:OFF /S /C "CALL "D:\a\_temp\d7a76f1b-939e-447b-b7cf-27fadd98f259.cmd""
2024-12-16T00:34:46.4112889Z The system cannot find the path specified.
2024-12-16T00:34:46.5102742Z ##[error]Cmd.exe exited with code '1'.
2024-12-16T00:34:46.5621381Z ##[section]Finishing: Command Line Script - clean up old test results files


]]]]]]]]]]]]]]]
- task: PublishTestResults@2
  inputs:
    testResultsFiles: 'pv-loan-calculator-test/test-output/junitreports/TEST-loanCalculatorPackage.LoanCalculatorTestClass1.xml'
    testRunTitle: 'Loan Calculator Test Results'
    mergeTestResults: false # Set to true if combining results from multiple files
=========
testResultsFiles: 'pv-loan-calculator-test/test-output/junitreports/TEST-*.xml'
---
$(Build.SourcesDirectory)/**/test-output/junitreports/TEST-*.xml
----
**/test-output/junitreports/TEST-*.xml
===================
del /s /q pv-loan-calculator-test\test-output\junitreports\*
cmd line - Clean up old test result files
=================
@Test(description = "Owner: John Doe")
public void testLoanCalculator() {}
======
$filePath = "pv-loan-calculator-test/test-output/junitreports/TEST-loanCalculatorPackage.LoanCalculatorTestClass1.xml"

# Read the file content
$xmlContent = Get-Content -Path $filePath

# Replace <testcase> with <testcase owner="John Doe">
$updatedContent = $xmlContent -replace '<testcase ', '<testcase owner="NAME" '

# Write the updated content back to the file
Set-Content -Path $filePath -Value $updatedContent
============
Clean up old test results (Command Line/Bash task).
Run Tests (e.g., Maven/Gradle task).
name add
Publish Test Results (PublishTestResults@2 task).
----
OfferTestClass
ABSimportTestClass
LoanCalculatorTestClass
CRMtestClass


]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
=======
<build>
  <plugins>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-surefire-plugin</artifactId>
      <version>3.0.0</version>
      <configuration>
        <testFailureIgnore>true</testFailureIgnore> 
      </configuration>
    </plugin>
  </plugins>
</build>
===
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import java.io.File;
import java.io.IOException;

public class ScreenshotUtil {

    public static String captureScreenshot(WebDriver driver, String testName) {
        try {
            // Take a screenshot
            File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);

            // Determine the artifact directory (CI/CD or local)
            String artifactDir = System.getenv("Build.ArtifactStagingDirectory");
            if (artifactDir == null || artifactDir.isEmpty()) {
                artifactDir = System.getProperty("user.dir") + "/screenshots"; // Local fallback directory
            }

            // Ensure the directory exists
            File directory = new File(artifactDir);
            if (!directory.exists()) {
                directory.mkdirs(); // Create the directory if it doesn't exist
            }

            // Define the destination file
            String destPath = artifactDir + "/" + testName + ".png";
            File destination = new File(destPath);

            // Copy the screenshot to the destination
            FileUtils.copyFile(screenshot, destination);

            System.out.println("Screenshot saved at: " + destination.getAbsolutePath());

            // Return the destination path
            return destPath;
        } catch (IOException e) {
            System.err.println("Failed to take screenshot: " + e.getMessage());
            return null; // Return null if there was an error
        }
    }
}
=================



@Test
    public void verifyTextOnPage() {
        // Navigate to the webpage
        driver.get(); 

        // Text to verify
        String expectedText = "Welcome to Example Domain"; 

        // Use WebDriverWait to ensure the page is fully loaded
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));
        WebElement bodyElement = wait.until(ExpectedConditions.presenceOfElementLocated(By.tagName("body")));

        // Verify if the text is present in the body element
        boolean isTextPresent = bodyElement.getText().contains(expectedText);

        // Assert that the text is found
        Assert.assertTrue(isTextPresent, "Expected text was not found on the page.");

        // Log result
        if (isTextPresent) {
            System.out.println("Test Passed: The expected text is present on the page.");
        }
    }
======================
WebElement bodyElement = driver.findElement(By.tagName("body"));
String bodyText = bodyElement.getText();
if (bodyText.contains("Welcome to Chase")) {
    System.out.println("Text found: Test Passed!");
} else {
    System.out.println("Text not found: Test Failed!");
}
==============


========================
master [rejected - non-fast-forward]
====
import org.testng.ITestListener;
import org.testng.ITestResult;
import org.testng.Reporter;

public class CustomJUnitReporterWithLogs implements ITestListener {

    @Override
    public void onTestSuccess(ITestResult result) {
        // Retrieve any logs added using Reporter.log
        String logMessages = String.join("\n", Reporter.getOutput(result));

        // Append the success message to the result message
        String successMessage = "Assertion Success: Expected value matched actual value.\n" + logMessages;

        // Set a dummy throwable to include the success message in the JUnit report
        result.setThrowable(new Exception(successMessage));
    }

    @Override
    public void onTestFailure(ITestResult result) {
        // Similar approach can be taken for failures
        String logMessages = String.join("\n", Reporter.getOutput(result));
        String failureMessage = result.getThrowable().getMessage() + "\n" + logMessages;

        result.setThrowable(new Exception(failureMessage));
    }

    
}
===========
String screenshotDir = Paths.get(System.getProperty("java.io.tmpdir"), "screenshots").toString();
-----
        ITestContext context = Reporter.getCurrentTestResult().getTestContext();
        context.setAttribute("driver", driver);
----
        System.out.println("Working Directory: " + workingDir);
        System.out.println("Screenshot Directory: " + screenshotDirectory);




0000000000000000000000000000000
=============
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite1">

  <!-- Register your custom listener for the JUnit reporting -->
  <listeners>
    <listener class-name="loanCalculatorPackage.CustomJUnitReporter" />
  </listeners>

  <test name="Test1">
    <classes>
      <class name="loanCalculatorPackage.LoanCalculatorTestClass1">
        <methods>
          <include name="testLc1" />  
          <include name="OfferTest" />
        </methods>
      </class>
    </classes>
  </test> <!-- Test -->

</suite> <!-- Suite -->

==============
 Assert.assertEquals(actual, expected, "Assertion failed: Expected value did not match actual value.");
===
wget https://downloads.apache.org/maven/maven-3/3.9.4/binaries/apache-maven-3.9.4-bin.zip
unzip apache-maven-3.9.4-bin.zip -d /tmp/
export PATH=/tmp/apache-maven-3.9.4/bin:$PATH

====
Can't connect to any repository: https://github.com/PVautomation/pv-loan-calculator-test.git (https://github.com/PVautomation/pv-loan-calculator-test.git: git-receive-pack not permitted on 'https://github.com/PVautomation/pv-loan-calculator-test.git/')
=====
Can't connect to any URI: https://github.com/PVautomation/PVautomation03.git (https://github.com/PVautomation/PVautomation03.git: git-receive-pack not permitted 
============
// Locate the shadow host element
WebElement shadowHost = driver.findElement(By.cssSelector("c-rf-custom-date-picker"));

// Access the shadow-root
JavascriptExecutor js = (JavascriptExecutor) driver;
WebElement shadowRoot = (WebElement) js.executeScript("return arguments[0].shadowRoot", shadowHost);

// Find the calendar icon inside the shadow-root
WebElement calendarIcon = shadowRoot.findElement(By.cssSelector("css_of_calendar_icon")); // Replace with actual CSS
calendarIcon.click(); // Interact with the calendar icon
===========
//input[@id='my-date-input-6243']/following-sibling::div[contains(@class, 'calendar-icon-class')]
============
WebElement inputBox = driver.findElement(By.id("my-date-input-6243"));
inputBox.click(); // This should trigger the calendar popup
========
//div[@class='slds-form-element datePickerSpaceFC']//button[contains(@class, 'calendar-icon-class')]
===========
JavascriptExecutor js = (JavascriptExecutor) driver;
js.executeScript("document.getElementById('my-date-input-6243').value = '2024-12';");
===========
+++++++++++++++++++++

//div[contains(@class, 'slds-text-align_center') and contains(@data-style-id, 'state0element0block_element0block_element3block_element0')]
========
//div[contains(@class, 'slds-text-align_center') and contains(@data-style-id, 'state0element0block_element0block_element3block_element0')]//svg[contains(@class, 'slds-icon')]
======
//use[contains(@xlink:href, 'sldsiconsutilityspritesvgsymbolssvg_check')]
=====
//div[@class='slds-col slds-text-align_center slds-border_top slds-border_right slds-border_bottom slds-border_left slds-p-around_xxx-small slds-size_4-of-12' and contains(@data-style-id, 'state0element0block_element0block_element3block_element0')]/omnistudio-flex-icon/svg
=====
// Locate the SVG element (tick icon)
WebElement tickIcon = driver.findElement(By.xpath("//svg[contains(@class, 'slds-icon') and contains(@aria-hidden, 'true')]"));

// Verify if the icon is displayed
if (tickIcon.isDisplayed()) {
    System.out.println("Tick icon is visible.");
}
=======
WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
WebElement checkbox = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[contains(@class, 'slds-text-align_center') and contains(@data-style-id, 'state0element0block_element0block_element3block_element0')]")));
++++++++++++++++++



0000000000000000000000
<div c-cfrf_addnewemploymentincome_cfrf_addnewemploymentincome="" class="slds-col condition-element slds-size_3-of-12" data-style-id="state0element1block_element0block_element18" data-rindex="0" data-conditions="{&quot;group&quot;:[{&quot;field&quot;:&quot;IncomeSource&quot;,&quot;hasMergeField&quot;:false,&quot;id&quot;:&quot;state-new-condition-0&quot;,&quot;operator&quot;:&quot;!=&quot;,&quot;type&quot;:&quot;custom&quot;,&quot;value&quot;:&quot;Fixed Income&quot;}],&quot;id&quot;:&quot;state-condition-object&quot;,&quot;isParent&quot;:true}" style=""><omnistudio-custom-lwc-wrapper c-cfrf_addnewemploymentincome_cfrf_addnewemploymentincome="" class="condition-element" data-rindex="0"><slot><c-rf-custom-date-picker c-cfrf_addnewemploymentincome_cfrf_addnewemploymentincome="" data-conditions="{&quot;group&quot;:[{&quot;field&quot;:&quot;IncomeSource&quot;,&quot;hasMergeField&quot;:false,&quot;id&quot;:&quot;state-new-condition-0&quot;,&quot;operator&quot;:&quot;!=&quot;,&quot;type&quot;:&quot;custom&quot;,&quot;value&quot;:&quot;Fixed Income&quot;}],&quot;id&quot;:&quot;state-condition-object&quot;,&quot;isParent&quot;:true}" data-preload-conditional-element="false" c-rfcustomdatepicker_rfcustomdatepicker-host=""><div c-rfcustomdatepicker_rfcustomdatepicker="" class="slds-form-element datePickerSpaceFC"><label class="slds-form-element__label" c-rfcustomdatepicker_rfcustomdatepicker="" for="date-input-id-required-6243"><abbr class="slds-required" title="required" c-rfcustomdatepicker_rfcustomdatepicker="">*</abbr>Start Date</label><br c-rfcustomdatepicker_rfcustomdatepicker=""><input c-rfcustomdatepicker_rfcustomdatepicker="" class="slds-input FCDatePickerClass" type="Month" max="2024-12" id="my-date-input-6243" required=""></div></c-rf-custom-date-picker></slot></omnistudio-custom-lwc-wrapper></div>
=======
<div c-cfrf_childcardemployerdetailsfrompersonacc_cfrf_childcardemployerdetailsfrompersonacc="" class="slds-col slds-text-align_center slds-border_top slds-border_right slds-border_bottom slds-border_left slds-p-around_xxx-small slds-size_4-of-12" data-style-id="state0element0block_element0block_element3block_element0" data-rindex="0" style="border-width: 1px; border-style: solid; border-color: rgb(15, 61, 89); border-radius: 6px; width: auto;"><omnistudio-flex-icon c-cfrf_childcardemployerdetailsfrompersonacc_cfrf_childcardemployerdetailsfrompersonacc="" data-style-id="state0element0block_element0block_element3block_element0_child" data-element-label="iconuparrow" data-action-key="state0element0block_element0block_element3block_element0"><svg class="slds-icon slds-icon_container slds-icon__svg--default slds-text-link_reset slds-icon-text-default slds-icon_medium" aria-hidden="true" style="fill: rgb(15, 61, 89);"><use xlink:href="#httpsrepublicfinanceqasandboxlightningforcecomsldsiconsutilityspritesvgsymbolssvg_check"></use></svg><span class="slds-assistive-text"></span></omnistudio-flex-icon></div>
====
<plugin>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-surefire-plugin</artifactId>
  <version>3.0.0-M4</version>
  <configuration>
    <reportsDirectory>test-output</reportsDirectory> 
  </configuration>
</plugin>



- task: PublishTestResults@2
  inputs:
    testResultsFiles: '$(Build.SourcesDirectory)/test-output/testng-*.xml'
    testRunTitle: 'Selenium Test Results'

9999999999999999999
[main] ERROR io.github.bonigarcia.wdm.online.HttpClient - Error HTTP 404 executing https://chromedriver.storage.googleapis.com/LATEST_RELEASE_131
[main] WARN io.github.bonigarcia.wdm.versions.VersionDetector - Exception reading https://chromedriver.storage.googleapis.com/LATEST_RELEASE_131 to get latest version of chromedriver (Error HTTP 404 executing https://chromedriver.storage.googleapis.com/LATEST_RELEASE_131)
[main] INFO io.github.bonigarcia.wdm.WebDriverManager - Exporting webdriver.chrome.driver as C:\Users\VssAdministrator\.cache\selenium\chromedriver\win32\114.0.5735.90\chromedriver.exe
Dec 04, 2024 11:51:54 PM org.openqa.selenium.devtools.CdpVersionFinder findNearestMatch
WARNING: Unable to find an exact match for CDP version 131, returning the closest version; found: 129; Please update to a Selenium version that supports CDP version 131


======
https://googlechromelabs.github.io/chrome-for-testing/
=====
2024-12-04T23:51:18.0329980Z [INFO] 
2024-12-04T23:51:18.0330264Z [INFO] -------------------------------------------------------
2024-12-04T23:51:18.0330562Z [INFO]  T E S T S
2024-12-04T23:51:18.0330854Z [INFO] -------------------------------------------------------
2024-12-04T23:51:19.2540501Z [INFO] Running TestSuite
2024-12-04T23:51:23.3925578Z [main] ERROR io.github.bonigarcia.wdm.online.HttpClient - Error HTTP 404 executing https://chromedriver.storage.googleapis.com/LATEST_RELEASE_131
2024-12-04T23:51:23.3927105Z [main] WARN io.github.bonigarcia.wdm.versions.VersionDetector - Exception reading https://chromedriver.storage.googleapis.com/LATEST_RELEASE_131 to get latest version of chromedriver (Error HTTP 404 executing https://chromedriver.storage.googleapis.com/LATEST_RELEASE_131)
2024-12-04T23:51:23.4439520Z [main] INFO io.github.bonigarcia.wdm.WebDriverManager - Reading https://chromedriver.storage.googleapis.com/ to seek chromedriver
2024-12-04T23:51:25.4026344Z [main] INFO io.github.bonigarcia.wdm.online.Downloader - Downloading https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_win32.zip
2024-12-04T23:51:25.5917615Z [main] INFO io.github.bonigarcia.wdm.online.Downloader - Extracting driver from compressed file chromedriver_win32.zip
2024-12-04T23:51:25.7255765Z [main] INFO io.github.bonigarcia.wdm.WebDriverManager - Exporting webdriver.chrome.driver as C:\Users\VssAdministrator\.cache\selenium\chromedriver\win32\114.0.5735.90\chromedriver.exe
2024-12-04T23:51:52.7918759Z Dec 04, 2024 11:51:52 PM org.openqa.selenium.devtools.CdpVersionFinder findNearestMatch
2024-12-04T23:51:52.7921785Z WARNING: Unable to find an exact match for CDP version 131, returning the closest version; found: 129; Please update to a Selenium version that supports CDP version 131

====
<dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-java</artifactId>
    <version>4.x.x</version> <!-- Replace with the latest version -->
</dependency>
<dependency>
    <groupId>io.github.bonigarcia</groupId>
    <artifactId>webdrivermanager</artifactId>
    <version>5.x.x</version> <!-- Use the latest version -->
</dependency>

WebDriverManager.chromedriver().setup();
WebDriverManager.chromedriver().clearResolutionCache().setup();

---------

ChromeOptions options = new ChromeOptions();
options.addArguments("--headless"); // Run in headless mode
options.addArguments("--disable-gpu"); // Disable GPU acceleration for headless mode
options.addArguments("--no-sandbox"); // Important for headless mode in CI/CD environments
WebDriver driver = new ChromeDriver(options);

-Dwebdriver.chrome.driver=$(Build.SourcesDirectory)\src\test\resources\chromedriver.exe

Source Folder: $(Build.SourcesDirectory)\JavaMavenTestNG\target\surefire-reports
Contents: **/index.html (or *.* to include all files in the surefire-reports folder)
Target Folder: $(Build.ArtifactStagingDirectory)\test-reports

Artifact Name: test-reports (any)
Publish Location: Container
Artifact Staging Directory: $(Build.ArtifactStagingDirectory)\test-reports

To: recipient's email address
Subject: Test Results for Build $(Build.BuildId))
Body: Check them in the build artifacts for results
Attachments: $(Build.ArtifactStagingDirectory)\test-reports\index.html 

===========

2024-12-04T15:48:41.1715716Z ##[section]Starting: Copy Files to: D:\a\1\a
2024-12-04T15:48:41.1723439Z ==============================================================================
2024-12-04T15:48:41.1724416Z Task         : Copy files
2024-12-04T15:48:41.1724934Z Description  : Copy files from a source folder to a target folder using patterns matching file paths (not folder paths)
2024-12-04T15:48:41.1725345Z Version      : 2.246.0
2024-12-04T15:48:41.1725617Z Author       : Microsoft Corporation
2024-12-04T15:48:41.1725886Z Help         : https://docs.microsoft.com/azure/devops/pipelines/tasks/utility/copy-files
2024-12-04T15:48:41.1726216Z ==============================================================================
2024-12-04T15:48:45.3621568Z found 1 files
2024-12-04T15:48:45.3625680Z Copying D:\a\1\s\JavaMavenTestNG\target\JavaMavenTestNG-0.0.1-SNAPSHOT.jar to D:\a\1\a\JavaMavenTestNG\target\JavaMavenTestNG-0.0.1-SNAPSHOT.jar
2024-12-04T15:48:45.3733001Z ##[section]Finishing: Copy Files to: D:\a\1\a

=============
<omnistudio-flex-action class="state0element0block_element1_child flexActionElement" data-style-id="state0element0block_element1_child" data-action-element-class="state0element0block_element1_child" data-action-key="state0element0block_element1" data-show-spinner="false" data-element-label="viewbuttonaction" data-conditions="{&quot;id&quot;:&quot;state-condition-object&quot;,&quot;isParent&quot;:true,&quot;group&quot;:[]}" omnistudio-flexaction_flexaction_slds-host=""><div omnistudio-flexaction_flexaction_slds="" class="slds-text-align--center action-template action-container-truncate"><a omnistudio-flexaction_flexaction_slds="" class="slds-action_item" href="javascript:void(0)" data-action-focus="" aria-label="View"><span omnistudio-flexaction_flexaction_slds="" class="slds-action_text" style="color:#fff;font-size:16px;"><span omnistudio-flexaction_flexaction_slds="" title="View">View</span></span></a></div></omnistudio-flex-action>

//omnistudio-flex-action[@data-element-label='viewbuttonaction']//a[@aria-label='View']

//omnistudio-flex-action[contains(@class, 'flexActionElement')]//a[contains(@class, 'slds-action_item')]
===================
WebElement textbox = driver.findElement(By.xpath("//label[text()='Username']/@for"));
WebElement textbox = driver.findElement(By.xpath("//label[text()='Username']/following-sibling::input"));
WebElement textbox = driver.findElement(By.xpath("//label[text()='Username']/input"));
WebElement textbox = driver.findElement(By.xpath("//label[text()='Username']/following::input[1]"));
//label[text()='LABEL_TEXT']/following-sibling::input
//label[contains(text(), 'PART_OF_LABEL_TEXT')]/following-sibling::input
WebDriverWait wait = new WebDriverWait(driver, 10);
WebElement textbox = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//label[text()='Username']/following-sibling::input")));
WebElement textbox = driver.findElement(By.xpath("//label[contains(text(), 'User')]/following-sibling::input"));

===================
        import java.util.Set;

        driver.get("https://crm.example.com"); 
        driver.manage().window().maximize();

        WebElement username = driver.findElement(By.id("username")); 
        WebElement password = driver.findElement(By.id("password"));
        WebElement loginButton = driver.findElement(By.id("loginButton")); 
        username.sendKeys("your-username");
        password.sendKeys("your-password");
        loginButton.click();

        Thread.sleep(3000);

        ((JavascriptExecutor) driver).executeScript("window.open('https://account.docusign.com', '_blank');");

        Set<String> windowHandles = driver.getWindowHandles();
        String crmWindow = driver.getWindowHandle();
        for (String handle : windowHandles) {
            if (!handle.equals(crmWindow)) {
                driver.switchTo().window(handle);
                break;
            }
        }

        WebElement docuSignUsername = driver.findElement(By.id("email")); 
        WebElement docuSignPassword = driver.findElement(By.id("password")); 
        WebElement docuSignLoginButton = driver.findElement(By.id("loginBtn")); 
        docuSignUsername.sendKeys("your-email");
        docuSignPassword.sendKeys("your-password");
        docuSignLoginButton.click();

        Thread.sleep(5000);
        WebElement document = driver.findElement(By.xpath("//button[contains(text(), 'Sign')]"));
        document.click();
        Thread.sleep(3000);
        driver.switchTo().window(crmWindow);
=======================

        List<WebElement> buttons = driver.findElements(By.tagName("button"));

        for (WebElement button : buttons) {
            System.out.println("Button Text: " + button.getText());

            if (button.getText().equalsIgnoreCase("Next")) {
                System.out.println("Found the 'Next' button. Clicking it now!");
                button.click();
                break; 
            }}
======================
List<WebElement> buttons = driver.findElements(By.className("button-class"));
==============
actions.doubleClick(button).perform();
===========

            List<WebElement> textboxes = driver.findElements(By.xpath("//input[@type='text']"));

            if (index < textboxes.size()) {
                WebElement textbox = textboxes.get(index);
                textbox.click();
                textbox.sendKeys("Hello, World!");
                System.out.println("Interacted with textbox at index: " + index);
            } else {
                System.out.println("Index out of bounds. Total textboxes: " + textboxes.size());
            }
        } catch (Exception e) {
            System.out.println("An error occurred: " + e.getMessage());
===========

        try {
  
            List<WebElement> labels = driver.findElements(By.tagName("label"));

            for (WebElement label : labels) {
                String labelText = label.getText();
                System.out.println("Found label: " + labelText);

                if (labelText.equalsIgnoreCase("Your Label Text")) { 
                   
                    String forAttribute = label.getAttribute("for");
                    WebElement textbox = driver.findElement(By.id(forAttribute));

                    // Interact with the textbox
                    textbox.click();
                    textbox.sendKeys("Input for the labeled textbox.");
                    System.out.println("Interacted with textbox labeled: " + labelText);
                    break;
                }
            }
        } catch (Exception e) {
            System.out.println("An error occurred: " + e.getMessage());}
==============
